{"mappings":"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","sources":["src/metranome/met.js"],"sourcesContent":["// Everying is instantiated in an immediately invoked function\n// Because all the code lives inside of an anonymous function none of it is accessible to the Global scope\n(function(){\n\tconst minute = 60000; // one minute in milliseconds\n\n\tlet bpm ; // will store the metronome play rate Beats Per Minute (BPM)\n\tlet readyPlay = false; // indicates whether metronome will play or not\n\tlet timer; // this will store setInterval, so we can stop/pause the metronome\n\tlet audioCtx; // Audio Context - contains web audio objects\n\tlet gainNode; // controls the web audio\n\t// store DOM object nodes\n\tlet _playController, _controllerText, _beats, _beatSlider;\n\n\t// create a <canvas> element to hold our the color gradient\n    let canvas = document.createElement('canvas');\n\n\tfunction init(){\n\t\t_cacheDom();\n\t\t_addEvents();\n\t\tupdateBPM();\n\t\tbuildAudio(); \n\t\tbuildGradient();\n\t\tchangeColors();\n\t}\n\n\t// captures and stores needed html DOM elements\n\tfunction _cacheDom(){\n\t\t_playController = document.querySelector('.play'); // Play button\n\t\t_controllerText = document.querySelector('.play-text'); // Button content (icon)\n\t\t_beats = document.querySelector('.beats'); // BPM display number\n\t\t_beatSlider = document.querySelector('.beat-slider'); // BMP Slider Input\n\t}\n\n\t// applies required event listeners to DOM Objects\n\tfunction _addEvents() {\n\t\t// Fires on click of play/pause button\n\t\t_playController.addEventListener('click', async function() {\n\t\t\t//readyPlay = !readyPlay; // swaps boolean value\n      if (!audioCtx) {\n\t\tbuildAudio();\n\t  }\n\n\t  if (audioCtx.state === \"suspended\") {\n\t\tawait audioCtx.resume();\n\t\tconsole.log(\"AudioContext resumed.\");\n\t  }\n      readyPlay = !readyPlay;\n\t  playController();\n\t\t});\n\n\t\t//When dragging the slider will update the bpm value\n\t\t_beatSlider.addEventListener('input', function(){updateBPM(); changeColors();});\n\n\t\t// Restart/update the playing BPM upon moving the slider, regardless of whether it's on or off\n\t\t//event fires upon releasing the slider\n\t\t_beatSlider.addEventListener('change', function(){\n\t\t\tstop(); // stops the current setInterval BPM\n\t\t\tplayController(); // starts the new BPM\n\t\t});\n\t}\n\n\t// updates the bpm value\n\tfunction updateBPM(){\n\t\t// 40 lowest bpm on slider, slide increments by 4\n\t\tbpm = _beatSlider.value * 4 + 40;\n\t\t// displays BPM rate on UI\n\t\t_beats.innerHTML = bpm;\n\t}\n\n\t// Checks whether or not to start playing or stop the metronome\n\tfunction playController(){\n    if (audioCtx && audioCtx.state === 'suspend') {\n      audioCtx.resume().then(() => {\n        togglePlay();\n\n      });\n    } else {\n      togglePlay();\n    }\n  }\n\tfunction togglePlay(){\t\n  // If ready to play\n\t\tif(readyPlay){\n\t\t\tplay();\n    } else {\n\t\t\tstop();\n\t\t}\n\t}\n\n\t//starts the metronome\n\tfunction play(){\n\t\tbeat(); // plays the first beat\n\t\t// need to store setInterval in timer, so that we can stop it and call it when we wish to stop\n\t\ttimer = window.setInterval(function(){beat()}, minute/bpm);\n\t\t// Modify Button content - change play icon to pause icon\n\t\t_controllerText.classList.remove('fa-play');\n\t\t_controllerText.classList.add('fa-pause');\n\t}\n\n\t// stops the metronome\n\tfunction stop(){\n\t\t// Stops setInterval function from making any more timed calls\n\t\twindow.clearInterval(timer);\n\t\t// Modify Button content - change pause icon to play icon\n\t\t_controllerText.classList.remove('fa-pause');\n\t\t_controllerText.classList.add('fa-play');\n\t}\n\n\t// this function produces the beat audio\n\tfunction beat(){\n\t\tconsole.log('Beat trigger');\n    gainNode.gain.value = .4; // sets audio to 40% volume\n\t\t_playController.classList.add('hit-effect'); // applies visual beat display\n\t\t_playController.style.borderWidth = '8px'; // applies visual beat display\n\n\t\t// Determines length of time to play each beat sound - in this case being 100 milliseconds\n\t\twindow.setTimeout(function(){\n\t\t\t// set audio to zero(inaudible) to end beat sound and prevents audio clipping\n\n\t\t\tgainNode.gain.value = 0;\n\n\t\t\t// removes visual effect to replicate pulse\n\t\t\t_playController.classList.remove('hit-effect');\n\t\t\t_playController.style.borderWidth = '0px';\n\t\t},100);\n\t}\n\n\t// Creates the WebAudio objects needed to produce tone\n\tfunction buildAudio(){\n\t\t// AudioContext is used to create the neccesary audio controllers, and connect them together to produce audio\n\t\tif (!audioCtx){\n      audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    }  \n    if (audioCtx.state === 'suspended') {\n      audioCtx.resume();\n    }\n\t\t\n\t\t// Creates an oscillator - oscillators generates a period wave form (this is what produces sound, think of \"sound wave\")\n\t\tlet oscillator = audioCtx.createOscillator();\n\t\t\n\t\t// creates a gainNode - used as the volume controller\n\t\tgainNode = audioCtx.createGain();\n\n    oscillator.type = 'triangle';\n    oscillator.frequency.value = 261.63;\n\n\t\tgainNode.gain.value = 0; // sets volume to 0% so we will not hear anything\n\t\t\n\t\t// connects the gain and oscillator nodes, so that the gain can control the oscillators volume\n\t\t//oscillator.connect(gainNode);\n\n\t\t// this dictates the shape of the sound wave which changes the type of noise produced\n\t\t// the default is a 'sine' wave, which looks like a tradional ocean wave with a crest and trough\n\t\t//oscillator.type = 'triangle'; // traingle wave  â€” other values are 'square', 'sawtooth', and 'custom'\n\n\t\t//oscillator.frequency.value = 261.63; // sets the frequency value in hertz for a C - note\n\t\toscillator.connect(gainNode);\n    gainNode.connect(audioCtx.destination);\n\t\t// turns on the oscillator to produce sound - will not produce sound at this point\n\t\toscillator.start();\n    console.log(\"Audio system initialized.\");\n\n\t\t// A final connection needs to be made between the gainNode and destination(typcially the speakers of your device)\n\t\t// We are building a chain of nodes to produce the sound \n\t\t// oscillator(sound signal) -- gain(volume) -- destination (speakers)\n\t\t//gainNode.connect(audioCtx.destination);\n\n\t}\n\n\tfunction buildGradient(){\n\t\t// We set the canvas width to slightly larger than beat range\n\t\t// This will allow us to grab colors for every beat on the slider\n\t    canvas.width = 209;\n\t    canvas.height = 1;\n\n\t\t// This creates a 2d context object, which is used to build 2D visuals like images, rectangles, and text\n\t\t// This will be used to create our color gradient for the slider.\n\t    let canvasContext = canvas.getContext(\"2d\");\n\n\t    // Create linear canvas gradient object on which we'll specify our colors, - specify x/y position and width/height\n\t    let gradient = canvasContext.createLinearGradient(0, 0, canvas.width, canvas.height);\n\n\t   \t// Create color gradient by adding color stops\n\t    // define colors to add - can use any color format but must be in quotes - offset, color\n\t      gradient.addColorStop(0.002, 'rgba(38, 57, 201, 1.000)');\n\t      gradient.addColorStop(0.217, 'rgba(11, 122, 226, 1.000)');\n\t      gradient.addColorStop(0.506, 'rgba(4, 206, 118, 1.000)');\n  \t      gradient.addColorStop(0.735, 'rgba(239, 220, 11, 1.000)');\n\t      gradient.addColorStop(1.000, 'rgba(242, 67, 9, 1.000)');\n\t      gradient.addColorStop(1.000, 'rgba(255, 255, 255, 1.000)');\n\n\t    // Use the gradient as the color fill for the context object\n\t    canvasContext.fillStyle = gradient;\n\n\t    // draw the context fill onto the canvas object - specify x/y position and width/height\n\t    canvasContext.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n\t// Changes color of elements\n\tfunction changeColors() {\n\t\t // Creates an object that represents the underlying pixel data for the area of the canvas \n\t\t // denoted by the rectangle specified in the arguments - x/y position and width/height\n     \t let rgbValues = canvas.getContext('2d').getImageData(bpm, 0, 1, 1).data;\n     \t // concatenate color data into rbg string\n     \t let bkgColor = \"rgb(\" + rgbValues[0]  + \", \" + rgbValues[1] + \", \" + rgbValues[2] + \")\";\n     \t // calculate color value for button hit effect\n      \t let hitEffect = \"rgba(\" + rgbValues[0] + 5+ \", \" + rgbValues[1]+ 5 + \", \" + rgbValues[2]+ 5 + \" ,.4)\";\n     \n     \t// Set Button Color\n      \t_playController.style.backgroundColor = bkgColor;\n      \t_playController.style.borderColor = hitEffect;\n\n      \t// This is a feature check to determine whether or not the browzer in use is firefox\n      \t if (typeof InstallTrigger !== 'undefined') {\n      \t \t// if fire fox: assert styling for slider\n      \t \tlet styleSheet = document.styleSheets[1]; // grab 2nd stylesheet (our main) - make sure you are grabbing the right stylesheet!\n\t\t    styleSheet.insertRule('input[type=range]::-moz-range-thumb { background: ' + bkgColor + ' }', styleSheet.cssRules.length);\n      \t }\n      \t else {\n      \t \t// if webkit: insert slider styling\n       \t\tdocument.styleSheets[0].addRule('input[type=range]::-webkit-slider-thumb', 'background-color: ' + bkgColor);\n      \t }\n\t }\t\n\t// build metronome\n\tinit();\n\tdocument.querySelector(\".home\").addEventListener(\"click\", function(){\n\t\twindow.location.herf = \"index.html\";\n\t});\n})()\n"],"names":[],"version":3,"file":"met.aaf1cf50.js.map","sourceRoot":"/__parcel_source_root/"}